#!/usr/bin/env ruby

require "#{ENV['DOTF']}/framework.rb"
require 'ostruct'
require 'date'
require 'fileutils'
require 'pathname'

def main(source_dir, target_dir)
  analysis = Analysis.new(source_dir, target_dir, verbose: true)
  analysis.analyze
  analysis.print

  puts
  if analysis.added.any? && confirm?('Copy files?', 'yes')
    analysis.copy!
  end
end

class Analysis < OpenStruct
  def initialize(source_dir, target_dir, options = {})
    super(
      source_dir: source_dir,
      target_dir: target_dir,
      verbose:    options[:verbose],
      added:      [],
      modified:   [],
      deleted:    [],
      errors:     [],
      totals:     {})
  end

  def analyze
    puts 'Searching for photos...' if verbose
    t = Time.now
    source_items = find_source_items
    puts "Analyzing #{source_items.length} photos..." if verbose

    source_items.each do |source_item|
      if source_item.is_a? Error
        errors << source_item
        next
      end

      pair = Pair.new(source_item, target_dir)

      if pair.status != :same
        self[pair.status] << pair
        totals[pair.status] ||= 0
        totals[pair.status] += source_item.size
      end
    end

    puts "Took #{(Time.now - t).round(3)}sec" if verbose
    puts
  end

  def find_source_items
    fields = %w(Directory FileName DateTimeOriginal Model
                FocalLengthIn35mmFormat Aperture ExposureTime ISO)

    `exiftool "#{source_dir}" -recurse -ignoreMinorErrors \
      -dateFormat '%Y-%m-%d %H:%M' \
      -printFormat '$#{fields.join(',$')}' \
      2>/dev/null`
    .split("\n")
    .map { |raw| SourceItem.parse(raw) }
  end

  def print
    print_group :added, :green
    print_group :modified, :blue
    print_group :deleted, :yellow

    if errors.any?
      puts "#{COLORS[:red]}* #{errors.length} error(s):"
      errors.each(&:print)
      puts RESET
    end
  end

  def print_group(name, color)
    if send(name).empty?
      puts "#{COLORS[color]}* No #{name} files#{RESET}"
    else
      list = send(name)
      puts "#{COLORS[color]}* #{list.length} #{name} file(s) (#{totals[name] / 1024 / 1024}mb):"
      print_files(list)
      puts RESET
    end
  end

  def print_files(pairs, max = 10)
    if pairs.length > max
      pairs[0..max/2-1].each(&:print)
      puts '    ...'
      pairs[-max/2..-1].each(&:print)
    else
      pairs.each(&:print)
    end
  end

  def copy!
    FileUtils.mkdir_p(target_dir)
    f = open(File.join(target_dir, 'copy.log'), 'a')
    f.puts "# Copy start (#{DateTime.now})"

    added.each do |pair|
      puts "Copying #{pair.target}..."
      FileUtils.mkdir_p(File.dirname(pair.target))
      FileUtils.cp(pair.source.filename, pair.target)
      f.puts pair.source.log_line
    end

    puts "Done."
    f.puts "# Copy complete (#{DateTime.now})"
  ensure
    f.close() unless f.nil?
  end
end

class Error
  def initialize(message)
    @message = message
  end

  def print
    puts "  - #{@message}"
  end
end

TARGET_CACHE = {}

class Pair < OpenStruct
  attr_reader :source, :target_dir

  def initialize(source, target_dir)
    @source = source
    @target_dir = target_dir
  end

  def target
    @target ||= find_target
  end

  def print
    puts "  - #{target} (#{source.size_mb})"
  end

  def status
    @status ||= identify_status
  end

  private

  def year_dir
    @year_dir ||= File.join(@target_dir, @source.date.strftime('%Y'))
  end

  def default_day_dir
    @default_day_dir ||= File.join(year_dir, @source.date.strftime('%m-%d'))
  end

  def find_target
    day_dir = default_day_dir

    if TARGET_CACHE[default_day_dir]
      day_dir = TARGET_CACHE[default_day_dir]
    elsif Dir.exists?(year_dir)
      day_dir = find_dir_with_desc || find_multi_day_target || default_day_dir
    end

    TARGET_CACHE[default_day_dir] = day_dir

    if Dir.exists?(day_dir)
      target = find_source_in_target_dir(day_dir)
      return target if target
    end

    File.join(day_dir, [@source.prefix, @source.params].join('-') + @source.ext)
  end

  def find_dir_with_desc
    Dir["#{default_day_dir}*"].first
  end

  def find_multi_day_target
    year = @source.date.strftime('%Y')

    Dir[File.join(year_dir, '*')].each do |dir|
      dates = /^[\d\-_]+/.match(File.basename(dir))[0]
      from, to = dates.split('_')
      next unless to

      from_month, _ = from.split('-')
      from = DateTime.parse("#{year}-#{from}")
      if to.include? '-'
        to = DateTime.parse("#{year}-#{to} 23:59:59")
      else
        to = DateTime.parse("#{year}-#{from_month}-#{to} 23:59:59")
      end

      if @source.date >= from && @source.date <= to
        days = (@source.date - from).to_i + 1
        return File.join(dir, "day#{days.to_s.rjust(2, '0')}")
      end
    end

    nil
  end

  def find_source_in_target_dir(dir)
    Dir[File.join(dir, "#{@source.prefix}*#{@source.ext}")].sort.first
  end

  def identify_status
    if File.exist?(target)
      File.size(target) == source.size ? :same : :modified
    else
      deleted? ? :deleted : :added
    end
  end

  def deleted?
    log_file = File.join(target_dir, 'copy.log')
    return false unless File.exist?(log_file)
    system("grep '^#{source.log_line}' '#{log_file}' > /dev/null")
  end
end


class SourceItem < OpenStruct
  def self.parse(raw)
    return Error.new(raw) if raw.start_with? 'Error:'

    dir, filename, date, model, focal_length, aperture, exposure_time, iso =
      raw.split(',')

    return Error.new("Error: no exif data for #{filename}") if date.nil? || date.length == 0
    date = DateTime.parse(date)

    prefix = [
      date.strftime("%H%M"),
      File.basename(filename, '.*').downcase.gsub(/^_+/, '')
    ].join('-')

    if model
      model = model.downcase.sub('dmc-', '')
        .sub('canon eos ', '').sub(' digital', '')
    end

    if focal_length && focal_length.length > 0
      focal_length.sub!(' ', '')
    else
      focal_length = nil
    end

    if exposure_time
      if exposure_time.include?('/')
        exposure_time = "#{exposure_time.sub('1/', '')}hz"
      else
        exposure_time = "#{exposure_time}s"
      end
    end

    aperture = "f#{aperture.sub(/\.0+/, '')}" if aperture
    iso = "i#{iso}" if iso

    new(
      filename: File.join(dir, filename),
      date:     date,
      prefix:   prefix,
      params:   [model, focal_length, exposure_time, aperture, iso]
                .compact.join('-')
    )
  rescue
    puts "Error parsing #{filename}"
    raise
  end

  def ext
    @ext ||= File.extname(filename).downcase
  end

  def size
    return @size unless @size.nil?
    @size = File.size(filename)
  end

  def size_mb
    @size_mb ||= "#{size / 1024 / 1024}mb"
  end

  def log_line
    @log_line ||= ['>>', date.strftime('%Y-%m-%d'), prefix].join(' ')
  end
end

main(*ARGV) if __FILE__ == $PROGRAM_NAME
