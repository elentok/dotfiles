#!/usr/bin/env node

const repl = require("repl");
const fs = require("fs");
const path = require("path");
const chalk = require("chalk");
const Rates = require("../lib/rates");

const REPL_HISTORY_FILE = path.join(process.env.HOME, ".cache", "calc");

function calculate(expr) {
  const c = parseCurrency(expr);
  if (c != null) {
    return Rates.get()
      .catch(err => {
        console.error("Error getting rates: ", err);
      })
      .then(rates => {
        const result = rates.convert(
          c.value,
          c.sourceCurrency,
          c.targetCurrency
        );
        return `${result.value} ${result.to}`;
      });
  }

  return Promise.resolve(eval(expr));
}

function parseCurrency(expr) {
  const match = expr.match(/([\d.]+)\s*([a-zA-Z$]+)(\s+to\s+([a-zA-Z$]+))?/);

  if (match == null) return null;

  // "123.45 nis to usd"
  if (match.length === 5) {
    return {
      value: parseFloat(match[1]),
      sourceCurrency: match[2],
      targetCurrency: match[4]
    };
  }

  // "123.45 nis"
  if (match.length === 3) {
    return {
      value: parseFloat(match[1]),
      sourceCurrency: match[2]
    };
  }

  return null;
}

const server = repl
  .start({
    prompt: "> ",

    eval(cmd, context, filename, callback) {
      calculate(cmd)
        .catch(err => {
          console.error("Error evaluating: ", err);
          callback(err);
        })
        .then(result => callback(null, result));
    },

    writer(output) {
      return "= " + chalk.green(output) + "\n";
    }
  })
  .on("exit", () => {
    fs.writeFileSync(REPL_HISTORY_FILE, server.lines.join("\n"));
  });

if (fs.existsSync(REPL_HISTORY_FILE)) {
  fs
    .readFileSync(REPL_HISTORY_FILE)
    .toString()
    .split("\n")
    .reverse()
    .filter(line => line.trim())
    .map(line => server.history.push(line));
}
