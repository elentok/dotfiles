#!/usr/bin/ruby
#
# Transmission Bitorrent Client CLI
#
# Usage:
#
#   bt ls
#   bt remove-complete
#   bt add-magnet <link>

require 'json'
require "#{ENV['DOTF']}/framework.rb"
load "#{ENV['DOTF']}/scripts/dotvar"

module Bt
  class Client
    def initialize(config = {})
      @host = config[:host] || 'localhost'
      @port = config[:port] || 9091
      @req_options = {}
      @req_options[:basic_auth] = [config[:user], config[:pass]] if config[:user]
      authenticate(config)
    end

    def authenticate(config)
      STDERR.puts 'Authenticating...'
      options = {}

      res = http_client.get('/transmission/rpc', options)
      match = %r(<code>(.*)</code>).match(res.body)
      fail "Can't find session id" if match.nil?

      name, value = match[1].split(': ')
      STDERR.puts "Authenticated: #{name}: #{value}"
      http_client.headers[name] = value
    end

    def add_magnet(link, options = {})
      res = http_client.post '/transmission/rpc',
                             method: 'torrent-add',
                             arguments:
                             {
                               paused: !!options[:paused],
                               filename: link
                             }

      puts res.body
    end

    def list
      res = http_client.post('/transmission/rpc',
                             method: 'torrent-get',
                             arguments: {
                               fields: [ 'id', 'name', 'status' ]
                             })

      JSON.parse(res.body)['arguments']['torrents'].map { |raw| Torrent.new(raw) }
    end

    def remove(torrent_ids)
      res = http_client.post('/transmission/rpc',
                             method: 'torrent-remove',
                             arguments: {
                               ids: torrent_ids
                             })

      res.body
    end

    private

    def http_client
      @http_client ||= HttpClient.new(@host, port: @port, req: @req_options)
    end
  end

  class Torrent
    STATUSES = [
      :stopped,       # 0, Torrent is stopped
      :check_wait,    # 1, Queued to check files
      :check,         # 2, Checking files
      :download_wait, # 3, Queued to download
      :download,      # 4, Downloading
      :seed_wait,     # 5, Queued to seed
      :seed           # 6  Seeding
    ]

    attr_reader :id, :name

    def initialize(raw = {})
      @id = raw['id']
      @name = raw['name']
      @status = STATUSES[raw['status']]
    end

    def complete?
      @status == :seed || @status == :seed_wait
    end

    def to_s
      "#{@status.to_s.ljust(13)}  #{@name}"
    end
  end

  class CLI < BaseCLI
    def usage
      system("usage #{__FILE__}")
    end

    def add_magnet(link)
      bt_client.add_magnet(link)
    end

    def ls
      puts bt_client.list
    end

    def remove_complete
      ids = bt_client.list.select(&:complete?).map(&:id)
      puts "Removing #{ids.length} complete torrents..."
      puts bt_client.remove(ids)
    end

    private

    def bt_client
      @bt_client ||= Client.new(bt_client_config)
    end

    def bt_client_config
      dotvar = DotVar::CLI.new

      {}.tap do |config|
        config[:host] = dotvar.store['bt_host'] ||
          dotvar.add('bt_host', 'Enter transmission host: ')

        config[:user] = dotvar.store['bt_user'] ||
          dotvar.add('bt_user', 'Enter transmission username: ')

        config[:pass] = dotvar.store['bt_pass'] ||
          dotvar.add_password('bt_pass', 'Enter transmission password: ')
      end
    end
  end
end

Bt::CLI.new.start
