#!/usr/bin/ruby
#
# Transmission Bitorrent Client CLI
#
# Usage:
#
#   bt ls
#   bt retry              - removes failed torrents and re-adds magnets
#   bt magnets            - outputs the magnet links of the current torrents
#   bt remove-complete
#   bt add-magnet <link>

require 'json'
require "#{ENV['DOTF']}/framework.rb"
load "#{ENV['DOTF']}/scripts/dotvar"

module Bt
  class Client
    def initialize(config = {})
      @host = config[:host] || 'localhost'
      @port = config[:port] || 9091
      @req_options = {}
      if config[:user]
        @req_options[:basic_auth] = [config[:user], config[:pass]]
      end
      authenticate
    end

    def authenticate
      STDERR.puts 'Authenticating...' if ENV['DEBUG']
      options = {}

      res = http_client.get('/transmission/rpc', options)
      match = %r{<code>(.*)</code>}.match(res.body)
      fail "Can't find session id" if match.nil?

      name, value = match[1].split(': ')
      STDERR.puts "Authenticated: #{name}: #{value}" if ENV['DEBUG']
      http_client.headers[name] = value
    end

    def add_magnet(link, options = {})
      res = post('/transmission/rpc',
                 method: 'torrent-add',
                 arguments:
                 {
                   paused: options[:paused],
                   filename: link
                 })

      puts res.body
    end

    def list
      res = post('/transmission/rpc',
                 method: 'torrent-get',
                 arguments: {
                   fields: %w(id name status percentDone rateDownload magnetLink
                              error errorString)
                 })

      JSON.parse(res.body)['arguments']['torrents']
        .map { |raw| Torrent.new(raw) }
    end

    def remove(torrent_ids)
      res = post('/transmission/rpc',
                 method: 'torrent-remove',
                 arguments: {
                   ids: torrent_ids
                 })

      res.body
    end

    private

    def post(*args)
      http_client.post(*args)
    end

    def http_client
      @http_client ||= HttpClient.new(@host, port: @port, req: @req_options)
    end
  end

  class Torrent
    STATUSES = [
      :stopped,       # 0, Torrent is stopped
      :check_wait,    # 1, Queued to check files
      :check,         # 2, Checking files
      :download_wait, # 3, Queued to download
      :download,      # 4, Downloading
      :seed_wait,     # 5, Queued to seed
      :seed           # 6  Seeding
    ]

    attr_reader :id, :name, :percent, :download_rate, :magnet_link

    def initialize(raw = {})
      @id = raw['id']
      @name = raw['name']
      @status = STATUSES[raw['status']]
      @percent = raw['percentDone']
      @download_rate = raw['rateDownload']
      @magnet_link = raw['magnetLink']
      @error = raw['error']
      @error_string = raw['errorString']
    end

    def complete?
      @status == :seed || @status == :seed_wait
    end

    def to_s
      [
        @status.to_s.ljust(13),
        percent_s.rjust(4),
        download_rate_s.rjust(8),
        @name,
        error
      ].join(' ')
    end

    def failed?
      @error != 0
    end

    def error
      failed? ? @error_string : nil
    end

    def percent_s
      "#{(@percent * 100).to_i}%"
    end

    def download_rate_s
      return '' if complete?

      "#{@download_rate / 1000}kb/s"
    end
  end

  class CLI < BaseCLI
    def usage
      system("usage #{__FILE__}")
    end

    def add_magnet(link)
      bt_client.add_magnet(link)
    end

    def ls
      puts bt_client.list
    end

    def retry
      bt_client.list.select(&:failed?).each do |t|
        bt_client.remove([t.id])
        bt_client.add_magnet(t.magnet_link)
      end
    end

    def magnets
      bt_client.list.each do |t|
        puts "#{t.magnet_link} #{t.name}"
      end
    end

    def remove_complete
      ids = bt_client.list.select(&:complete?).map(&:id)
      puts "Removing #{ids.length} complete torrents..."
      puts bt_client.remove(ids)
    end

    private

    def bt_client
      @bt_client ||= Client.new(bt_client_config)
    end

    def bt_client_config
      dotvar = DotVar::CLI.new

      {}.tap do |config|
        config[:host] = dotvar.store['bt_host'] ||
                        dotvar.add('bt_host', 'Enter transmission host: ')

        config[:user] = dotvar.store['bt_user'] ||
                        dotvar.add('bt_user', 'Enter transmission username: ')

        config[:pass] = dotvar.store['bt_pass'] ||
                        dotvar.add_password('bt_pass',
                                            'Enter transmission password: ')
      end
    end
  end
end

Bt::CLI.new.start
