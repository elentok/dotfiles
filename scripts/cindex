#!/usr/bin/env python3

import subprocess
import re
import sys


def main():
    if len(sys.argv) == 1:
        usage()
        sys.exit(1)

    cmd = sys.argv[1]
    if cmd == "index":
        index()
    else:
        usage()
        sys.exit(1)


def usage():
    print("\nUsage: cindex (index)\n")


def index():
    cmd = 'rg --no-heading --line-number -tts -tjs "^(interface|class|enum|export) "'
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    if p.stdout is not None:
        entries = p.stdout.read().decode().splitlines()
        for entry in entries:
            parsed_entry = parse_entry(entry)
            if parsed_entry:
                print(",".join(parsed_entry))


def parse_entry(entry: str):
    filename, linenumber, line = entry.split(":", 2)
    symbol = extract_symbol(line)
    if symbol is None:
        sys.stderr.write(f'Error: unable to extract symbol from "{line}"')
        return None

    symbol_type, symbol_name = symbol

    return [symbol_name, symbol_type, filename, linenumber]


RE = re.compile("^(export )?(async )?(class|const|enum|interface|function) ([^ :(]+)")


def extract_symbol(line: str):
    match = RE.match(line)
    if match:
        return (match.group(3), match.group(4))


if __name__ == "__main__":
    main()
