#!/usr/bin/env bash
#
# Elentok's dotfiles
#
# Usage:
#
#   dotf list                         - lists all plugins
#   dotf install                      - installs all plugins
#   dotf install [plugin] [plugin]... - install specific plugins
#   dotf update                       - pulls from git and reruns install
#   dotf export-vim                   - exports vim config to .tar.gz
#

source `dirname $0`/../framework

benchmark-start

main() {
  cmd="${1:-}"
  shift || true
  case "$cmd" in
  list | l)
    list_plugins
    ;;
  install | i)
    install "$@"
    ;;
  update | u)
    update
    ;;
  export-vim)
    export_vim
    ;;
  *)
    usage "$0"
    ;;
  esac
}

list_plugins() {
  (
    echo vim
    echo zsh
    /bin/ls -1 $DOTF/plugins
    /bin/ls -1 $DOTL/plugins 2>/dev/null
  ) | sort
}

install() {
  mkdir -p ~/bin

  if [ $# -gt 0 ]; then
    dotf-plugin "$@"
    return
  fi

  install_all
}

install_all() {
  cd $DOTF

  git submodule update --init --recursive

  base_plugins
  gui_plugins

  yarn install

  show_done
}

update() {
  header "Updating dotfiles"
  cd $DOTF

  bullet "Pulling changes... "
  old_head=`git rev-parse HEAD`
  git pull
  new_head=`git rev-parse HEAD`

  if [ "$old_head" != "$new_head" ]; then
    echo -e "\nPulled the following changes:"
    git changelog ${old_head}..${new_head}

    echo -ne "\nPress any key to run the installer..."
    read -n 1

    if is_mac; then
      bullet 'Updating brew... '
      brew update
    fi

    install
  fi
}

show_done() {
  echo -e "$GREEN=========================="
  echo "Done ($(benchmark-stop))"
  echo -e "==========================$RESET"
}

base_plugins() {
  dotf-plugin nodejs
  dotf-plugin git
  dotf-plugin zsh
  dotf-plugin nvim
  dotf-plugin ripgrep
  dotf-plugin tig
  dotf-plugin bash
  dotf-plugin tmux
  dotf-plugin ruby

  install_package ncdu
  install_package wget
  install_package htop
  install_package --yum=ImageMagick imagemagick

  if has_command code; then
    yarn vscode:sync
  fi

  if is_arch; then
    pacman_install openssh
  fi
}

gui_plugins() {
  if is_mac; then
    dotf-plugin osx-tuning
    dotf-plugin iterm
  elif is_linux; then
    if [ "$HAS_GUI" = 'yes' ]; then
      dotf-plugin linux-gui-apps
    fi
  fi

}

export_vim() {
  tar czvf vim-$(date +%Y%m%d).tar.gz \
    --exclude 'YouCompleteMe' \
    --exclude 'node_modules' \
    --exclude '.git' \
    vim framework
}

main "$@"
