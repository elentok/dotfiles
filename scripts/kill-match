#!/usr/bin/env ruby

require "#{ENV['DOTF']}/framework.rb"

class CLI < OptionsCLI
  desc 'Kills all processes matching a pattern'
  usage 'kill-match [options] <pattern>'
  min_items 1
  cli_options \
    sudo: ['-s', '--sudo', 'Use "sudo kill"']

  def start
    kill_matching(Regexp.new(ARGV.first), options)
  end
end

def kill_matching(re, options = {})
  to_kill = processes.select { |p| p.path =~ re }
  die 'No processes found' if to_kill.empty?

  puts "Found #{to_kill.length} processes:"
  to_kill.each(&:print)
  puts
  to_kill.each { |p| p.kill!(options) } if confirm? 'Kill?'
end

def die(message)
  puts message
  exit 1
end

def processes
  `ps aux`.split("\n")
    .map { |line| AProcess.parse(line) }
    .compact
    .reject { |p| p.pid == Process.pid }
end

class AProcess
  attr_reader :user, :pid, :path

  def initialize(user, pid, path)
    @user = user
    @pid = pid
    @path = path
  end

  def kill!(options = {})
    puts "- killing #{@pid}"

    if options[:sudo]
      system("sudo kill #{@pid}")
    else
      system("kill -9 #{@pid}")
    end
  end

  def self.parse(line)
    fields = line.split(/\s+/, 11)
    AProcess.new(fields[0], fields[1].to_i, fields[10])
  end

  def to_s
    [@pid, @user, @path[0..70]].join("\t")
  end

  def print
    puts "- #{red(pid)}\t#{gray(path)}"
  end
end

CLI.new.start
