#!/usr/bin/env ruby

module CLI
  def self.main
    cmd = ARGV.first
    ARGV.shift

    case cmd
    when 'list-devices'
      puts Device.all
    when 'list-apps'
      list_apps(*ARGV)
    when 'booted-device'
      puts Device.booted
    when 'install-app'
      install_app(*ARGV)
    else
      usage
    end
  end

  def self.usage
    puts <<-EOF

  ios - iOS Simulator helper script

  Usage:

    ios list-devices
    ios list-apps [device-id]
    ios booted-device
    ios install-app <path-to-app-folder>

    EOF
  end

  def self.install_app(path)
    system("xcrun simctl install booted \"#{path}\"")
  end

  def self.list_apps(id = nil)
    device = id ? Device.find_by_id(id) : Device.booted
    puts device.apps
  end
end

class Device
  attr_reader :id, :name, :status
  def initialize(id, name, status)
    @id = id
    @name = name
    @status = status
  end

  def self.all
    @all ||= `xcrun simctl list devices`.split("\n")
      .map { |line| self.parse(line) }
      .compact
  end

  def self.booted
    all.find { |device| device.status == :booted }
  end

  def self.find_by_id(id)
    all.find { |device| device.id == id }
  end

  def self.parse(line)
    match = /^([^(]+) \(([^)]+)\) \(([^\)]+)\)/.match(line.strip)
    if match
      id = match[2]
      name = match[1].strip
      status = match[3].downcase.to_sym
      Device.new(id, name, status)
    end
  end

  def to_s
    "#{@id} #{@name} (#{@status})"
  end

  def apps
    Dir["#{apps_root_dir}/*"].map do |path|
      App.new File.basename(path), self
    end
  end

  def root_dir
    @root_dir ||= File.expand_path(
      "~/Library/Developer/CoreSimulator/Devices/#{@id}")
  end

  def apps_root_dir
    @apps_root_dir ||= File.join(root_dir, 'Data/Containers/Data/Application')
  end
end

class App
  attr_reader :id
  def initialize(id, device)
    @id = id
    @device = device
  end

  def to_s
    @id
  end
end

CLI.main
