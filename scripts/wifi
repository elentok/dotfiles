#!/usr/bin/env bash
#
# WiFi management script
#
# Usage:
#
#   wifi (on|off|status|devices|list|connect)

source $DOTF/framework

DEVICE=en0

main() {
  cmd=$1
  shift
  if has_command "wifi_${cmd}"; then
    wifi_${cmd} "$@"
  elif has_command "${OS}_wifi_${cmd}"; then
    ${OS}_wifi_${cmd} "$@"
  else
    usage $0
  fi
}

linux_wifi_on() {
  echo "Turning WIFI on..."
  nmcli radio wifi on
}

mac_wifi_on() {
  echo "Turning WIFI on..."
  networksetup -setairportpower $DEVICE on
}

linux_wifi_off() {
  echo "Turning WIFI off..."
  nmcli radio wifi off
}

mac_wifi_off() {
  echo "Turning WIFI off..."
  networksetup -setairportpower $DEVICE off
}

mac_wifi_status() {
  networksetup -getairportnetwork $DEVICE
  networksetup -getairportpower $DEVICE
}

linux_wifi_status() {
  nmcli connection show --active
}

mac_wifi_devices() {
  networksetup -listallhardwareports
}

linux_wifi_devices() {
  echo 'NOT SUPPORTED'
}

mac_wifi_connect() {
  networksetup -setairportnetwork en0 "$@"
}

linux_wifi_connect() {
  local ap="$1"
  if [ -z "$ap" ]; then
    ap=$(linux_pick_accesspoint)
  fi

  if [ -z "$ap" ]; then
    echo "User aborted."
    exit 1
  fi

  echo "Connecting to $ap..."
  nmcli device wifi connect "$ap"
}

linux_pick_accesspoint() {
  nmcli device wifi list | grep -v 'SSID' | fzf --exit-0 --select-1 | \
    sed -E 's/^\*?\s*//' | awk '{ print $1 }'
}

mac_wifi_list() {
  /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport scan
}

linux_wifi_list() {
  nmcli device wifi list
}

main "$@"
