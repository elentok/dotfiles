#!/usr/bin/env node

const _ = require("underscore");
const chalk = require("chalk");
const { exec } = require("child_process");
const readline = require("readline");

const FORMAT = "%h;;;%cr;;;%D;;;%an;;;%s";

// Keep colors when piping to head/less/...
chalk.enabled = true;

// Exit successfuly when the output pipe is closed (e.g. when piping to "head")
process.stdout.on("error", err => {
  if (err.code === "EPIPE") {
    process.exit(0);
  }
});

function main() {
  const args = process.argv.splice(2).join(" ");
  const proc = exec(`git log --decorate=full --pretty="${FORMAT}" ${args}`);
  const rl = readline.createInterface({ input: proc.stdout });
  rl.on("line", line => parseLine(line));
}

function parseLine(line) {
  let [hash, commitDate, refs, author, subject] = line.split(";;;");

  hash = chalk.magenta(hash);
  commitDate = chalk.blue(formatDate(commitDate));
  author = chalk.green(shortenAuthor(author));
  refs = formatRefs(refs);
  const dot = chalk.blue("●");
  console.info(`${hash} ${commitDate} ${author} ${dot}${refs} ${subject}`);
}

function formatRefs(refsString) {
  refsString = refsString.trim();
  if (refsString.length === 0) return "";

  const refs = _(refsString.split(", ").map(parseRef)).sortBy(ref => ref.order);

  return " " + refs.map(formatRef).join(" ");
}

function parseRef(ref) {
  ref = ref.replace("HEAD -> ", "");

  if (/^refs\/heads\//.test(ref)) {
    return { type: "branch", name: ref.substring(11), order: 1 };
  }

  if (/^tag:/.test(ref)) {
    return { type: "tag", name: ref.substring(15), order: 2 };
  }

  return {
    type: "other",
    name: ref.replace(/^refs\/remotes\//, ""),
    order: 999
  };
}

function formatRef(ref) {
  switch (ref.type) {
    case "tag":
      return chalk.magenta(`<${ref.name}>`);
    case "branch":
      return chalk.bgGreen.black(`[${ref.name}]`);
    default:
      return chalk.yellow(`{${ref.name}}`);
  }
}

function leftPad(string, width, char = " ") {
  while (string.length < width) {
    string = `${char}${string}`;
  }

  return string;
}

function formatDate(dateString) {
  dateString = dateString
    .replace(/ seconds?/, "s")
    .replace(/ minutes?/, "m")
    .replace(/ hours?/, "h")
    .replace(/ days?/, "d")
    .replace(/ months?/, "mo")
    .replace(/ years?/, "y")
    .replace(/ weeks?/, "w");

  return leftPad(dateString, 12);
}

function shortenAuthor(author) {
  author = author
    .split(" ")
    .map(word => word.charAt(0))
    .join("")
    .substring(0, 2);
  return leftPad(author, 2);
}

main();
