#!/usr/bin/env ruby

USAGE = "
dotvar - manages ~/.config/variables.yml

Usage:

  dotvar exists {key}
  dotvar get {key}
  dotvar set {key} {value}
  dotvar add {key} {prompt}
  dotvar add_password {key} {prompt}
  dotvar env"

require 'io/console' # for $stdin.noecho
require 'yaml'

module DotVar
  class CLI
    def main
      action = ARGV.shift
      if action && self.class.public_method_defined?(action)
        send(action, *ARGV)
      else
        puts USAGE
      end
    end

    def env
      puts store.as_exports
    end

    def exists(key)
      exit 1 unless store.key?(key)
    end

    def get(key)
      if store.key? key
        puts store[key]
      else
        $stderr.puts "var '#{key}' not found"
        exit 1
      end
    end

    def set(key, value)
      store[key] = value
    end

    def add_password(key, prompt)
      value = read_password(prompt) while value.nil?
      store[key] = value
    end

    def add(key, prompt)
      store[key] = read(prompt)
    end

    private

    def store
      @store ||= Store.default
    end

    def read_password(prompt)
      value = read_noecho prompt
      confirm_value = read_noecho 'Enter again to confirm: '

      if value != confirm_value
        $stderr.puts "\nPasswords don't match, try again."
        nil
      else
        value
      end
    end

    def read(prompt)
      print prompt
      $stdin.gets.strip
    end

    def read_noecho(prompt)
      print prompt
      value = $stdin.noecho(&:gets)
      puts
      value.strip
    end
  end

  class Store
    DEFAULT_FILE = File.expand_path('~/.config/variables.yml')
    MODE = 0600

    def initialize(filename, vars = {})
      @filename = filename
      @vars = vars
    end

    def key?(key)
      @vars.key?(key)
    end

    def [](key)
      @vars[key]
    end

    def keys
      @vars.keys
    end

    def []=(key, value)
      @vars[key] = value
      save!
    end

    def as_exports
      @vars.map do |key, value|
        puts "export #{key}=#{value}"
      end
    end

    def set_permissions!
      File.chmod(MODE, @filename) if File.exist?(@filename)
    end

    def save!
      File.open(@filename, 'w') do |out|
        YAML.dump @vars, out
      end
      set_permissions!
    end

    def self.default
      from_file(DEFAULT_FILE)
    end

    def self.from_file(filename)
      vars =
        if File.exist? filename
          YAML.load_file(filename) || {}
        else
          {}
        end
      new(filename, vars)
    end
  end
end

DotVar::CLI.new.main if __FILE__ == $PROGRAM_NAME
