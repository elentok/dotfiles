#!/bin/bash

NEWLINE_REGEX="(\s*\r?\n){3,}"
EOF_NEWLINE_REGEX="(\s*\r?\n){2,}\Z"
BAD_WORDS="console\.log|ddescribe|iit|describe\.only|it\.only|debugger"

REGEX="($NEWLINE_REGEX|$EOF_NEWLINE_REGEX|$BAD_WORDS)"

RED="\033[31m"
GREEN="\033[32m"
BLUE="\033[34m"
RESET="\033[0m"

EXIT_CODE=0

SHOW_COMMAND="cat"
GREP_COMMAND="pcregrep --line-number --color=always --multiline "$REGEX""
HOOK_FILE='.git/hooks/pre-commit'

main() {
  cmd="$1"
  shift
  case "$cmd" in
    "staged")
      SHOW_COMMAND="show_staged_file"
      check_staged $@
      ;;
    "commit")
      check_commit $@
      ;;
    "file")
      check_file $@
      ;;
    "all")
      check_all $@
      ;;
    "install")
      install $@
      exit $?
      ;;
    *)
      usage
      exit 256
      ;;
  esac

  if [ $EXIT_CODE -eq 0 ]; then
    echo
    echo -e "${GREEN}✔ The files are valid${RESET}"
    echo
  else
    echo
    echo -e "${RED}✘ Found errors!${RESET}"
    echo
    exit $EXIT_CODE
  fi
}

show_staged_file() {
  git show ":$1"
}

check_staged() {
  FILES="$(get_staged_files)"
  check_files
}

check_commit() {
  id="${1:-HEAD}"
  echo "Checking commit '$id'..."
  get_commit_files $id
  FILES="$(get_commit_files $id)"
  check_files
}

check_file() {
  if [ "$*" == "" ]; then
    usage
    exit 256
  fi

  FILES="$@"
  check_files
}

check_all() {
  echo "Checking all files"
  FILES="$(git ls-files)"
  check_files
}

check_files() {
  while read file; do
    if [ "$file" == "" ]; then continue; fi
    output="$($SHOW_COMMAND "$file" | $GREP_COMMAND)"
    if [ $? -eq 0 ]; then
      echo
      echo -e "$BLUE===== $file =====$RESET"
      echo "$output"
      EXIT_CODE=1
    fi
  done <<< "$FILES"
}

usage() {
  echo
  echo "git-validate staged"
  echo "git-validate commit (hash|branch|tag) (default: 'HEAD')"
  echo "git-validate file   {filename}"
  echo "git-validate all"
  echo
}

get_staged_files() {
  # get staged non-deleted files
  git diff --staged --name-status | grep -v '^D' | awk '{ print $2 }' | \
    filter_by_extension
}

get_commit_files() {
  git show $1 --name-status | grep -v '^D' | awk '{ print $2 }' | \
    filter_by_extension
}

filter_by_extension() {
  grep -E '\.(coffee|js|html|jade|haml|hamlc|erb|css|scss)$'
}

install() {
  if [ ! -e $HOOK_FILE ]; then
    echo 'Installing pre-commit hook'
    echo '#!/bin/bash' > $HOOK_FILE
    echo 'git validate staged' >> $HOOK_FILE
    chmod +x $HOOK_FILE
  else
    echo 'pre-commit hook already exists, editing'
    vim $HOOK_FILE
  fi
}

main $@
