#!/usr/bin/env ruby

HELP_FILENAME = "#{ENV['DOTF']}/docs/help.md".freeze
LOCAL_HELP_GLOB = "#{ENV['DOTL']}/docs/*.md".freeze

module HelpReader
  def self.read_sections(filename, query = nil)
    sections = []

    File.open(filename, 'r') do |f|
      section_lines = []

      f.each_line do |line|
        if starts_section?(line)
          add_section!(sections, section_lines.join, query)
          section_lines = [line]
        else
          section_lines.push(line)
        end
      end

      add_section!(sections, section_lines.join, query)
    end

    sections
  end

  def self.starts_section?(line)
    line =~ /^\#/
  end

  def self.add_section!(sections, section, query)
    return if section.strip.empty?
    if query.nil?
      sections << section
    elsif matches?(section, query)
      sections << SectionRenderer.render(section, query)
    end
  end

  def self.matches?(section, text)
    section =~ Regexp.new(text, 'i')
  end
end

module SectionRenderer
  GREEN = "\e[32m".freeze
  DEFAULT = "\e[0m".freeze
  BOLD_ON = "\033[1m".freeze
  BOLD_OFF = "\033[22m".freeze

  def self.render(section, query)
    highlight = "#{GREEN}#{BOLD_ON}#{query}#{DEFAULT}#{BOLD_OFF}"
    section.gsub Regexp.new(query, 'i'), highlight
  end
end

def main
  query = nil
  query = ARGV[0] unless ARGV.empty?

  if query == 'e'
    system("vim #{HELP_FILENAME} < `tty` > `tty`")
  else
    puts HelpReader.read_sections(HELP_FILENAME, query)

    local_help_files = "#{ENV['DOTL']}/docs/*.md"
    Dir[LOCAL_HELP_GLOB].each do |filename|
      puts HelpReader.read_sections(filename, query)
    end
  end
end

main if __FILE__ == $PROGRAM_NAME
