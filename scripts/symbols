#!/usr/bin/env python3

from typing import Optional
from collections.abc import Callable
import subprocess
import re
import os
import sys
from dataclasses import dataclass

ROOT = os.path.expanduser("~/.cache/symbols")
os.makedirs(ROOT, exist_ok=True)

SYMBOLS_FILE = os.path.join(ROOT, "symbols.csv")
SYMBOLS_NAMES_FILE = os.path.join(ROOT, "symbol-names.txt")


def main():
    if len(sys.argv) == 1:
        usage()
        sys.exit(1)

    cmd = sys.argv[1]
    if cmd == "index":
        index()
    elif cmd == "list":
        show_list()
    elif cmd == "names":
        names()
    elif cmd == "show":
        show()
    elif cmd == "pick":
        pick()
    else:
        usage()
        sys.exit(1)


def usage():
    print(
        """
Usage:

  symbols names
  symbols show <name>
  symbols index <dir>...
"""
    )


def index():
    dirs = sys.argv[2:]
    symbols = []
    for dir in dirs:
        symbols.extend(index_dir(dir))

    names = [symbol.name for symbol in symbols]
    names.sort()
    with open(SYMBOLS_NAMES_FILE, "w") as f:
        f.write("\n".join(names))

    lines = [str(symbol) for symbol in symbols]
    lines.sort()
    with open(SYMBOLS_FILE, "w") as f:
        f.write("\n".join(lines))


def index_dir(dir):
    absdir = os.path.abspath(dir)
    symbols = index_code(absdir)
    symbols.extend(index_protos(absdir))
    return symbols


def index_code(dir):
    lines = run(
        f'rg --no-heading --line-number -tts -tjs "^(interface|class|enum|export) " "{dir}"'
    )
    symbols = []
    for line in lines:
        symbol = parse_line(line, extract_code_symbol)
        if symbol:
            symbols.append(symbol)
    return symbols


def index_protos(dir):
    symbols = []
    packages_by_filename = {}
    lines = run(f'rg --no-heading --line-number -tproto "^(package|message) " "{dir}"')
    for line in lines:
        symbol = parse_line(line, extract_proto_symbol)

        if symbol:
            if symbol.type == "package":
                packages_by_filename[symbol.filename] = symbol.name
            elif symbol.type == "message":
                package = packages_by_filename.get(symbol.filename)
                if package is None:
                    sys.stderr.write(
                        f"Error in {symbol.filename}: No package specified.\n"
                    )
                    continue
                symbol.name = ".".join([package, symbol.name])
                symbols.append(symbol)
    return symbols


def parse_line(line: str, symbol_extractor: Callable[[str], Optional[tuple[str, str]]]):
    filename, number, text = line.split(":", 2)
    symbol = symbol_extractor(text)
    if symbol is None:
        sys.stderr.write(
            f'Error in {filename}: unable to extract proto symbol from "{text}"\n'
        )
        return None

    symbol_type, symbol_name = symbol

    return Symbol(symbol_name, symbol_type, filename, number)


PROTO_RE = re.compile("^(message|package) ([^ ;]+)")
CODE_RE = re.compile(
    "^(export )?(async )?(class|const|enum|interface|function) ([^ :(]+)"
)


def extract_code_symbol(line: str) -> Optional[tuple[str, str]]:
    match = CODE_RE.match(line)
    if match:
        return (match.group(3), match.group(4))


def extract_proto_symbol(line: str) -> Optional[tuple[str, str]]:
    match = PROTO_RE.match(line)
    if match:
        return (match.group(1), match.group(2))


def names():
    print(get_names())


def get_names():
    with open(SYMBOLS_NAMES_FILE, "r") as f:
        return f.read()


def show_list():
    with open(SYMBOLS_FILE, "r") as f:
        print(f.read())


def show():
    symbol_name = sys.argv[2]
    filename, line = find_symbol_location(symbol_name)
    print(f"{filename}:{line}")


def find_symbol_location(name):
    line = run(f"rg '^{name},' '{SYMBOLS_FILE}' ")[0]
    _, _, filename, line = line.split(",")
    return (filename, line)


def pick():
    p = subprocess.Popen(
        "fzf", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE
    )
    if p.stdin:
        p.stdin.write(get_names().encode())
    if p.stdout is None:
        raise Exception(f"Failed to run fzf")

    symbol_name = p.stdout.read().decode().strip()
    filename, line = find_symbol_location(symbol_name)
    print(f"{filename}:{line}")


def run(cmd):
    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    if p.stdout is None:
        raise Exception(f"Failed to run command: {cmd}")

    return p.stdout.read().decode().splitlines()


@dataclass
class Symbol:
    name: str
    type: str
    filename: str
    line: str

    def __str__(self):
        return ",".join([self.name, self.type, self.filename, self.line])


if __name__ == "__main__":
    main()
