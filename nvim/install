#!/usr/bin/env bash

set -euo pipefail

source `dirname $0`/../framework

NEOVIM_VERSION='v0.3.0'

main() {
  header "NeoVim"

  install_requirements
  install_neovim
  install_symlinks
  install_plugins
  install_dtach
  install_cli_tools

  (cd $DOTF/nvim && ./ctags-build)
}

install_requirements() {
  if is_mac; then
    # python3 is required for the deoplete plugin
    brew_install python3
  elif is_arch; then
    pacman_install python python-pip
  elif is_debian; then
    apt_install python-dev python-pip python3-dev python3-pip
  elif is_fedora; then
    yum_install python3-devel gcc
  fi

  npm_install neovim
  pip3_install neovim
  pip3_install neovim-remote
}

install_neovim() {
  if is_arch; then
    pacman_install neovim
  elif is_mac; then
    install_neovim_mac
  else
    if command_missing nvim; then
      PRIMARY=yes $DOTF/nvim/build
    fi
  fi
}

install_neovim_mac() {
  mkdir -p ~/Applications
  cd ~/Applications

  if [ ! -e ~/Applications/nvim-osx64 ]; then
    bullet 'Downloading Neovim for Mac... '
    curl -L https://github.com/neovim/neovim/releases/download/$NEOVIM_VERSION/nvim-macos.tar.gz \
      -o /tmp/nvim-macos.tar.gz
    show_result

    tar xzvf /tmp/nvim-macos.tar.gz
  fi

  mkdir -p ~/bin
  symlink ~/Applications/nvim-osx64/bin/nvim ~/bin/nvim
}

install_neovim_appimage() {
  mkdir -p ~/Applications
  cd ~/Applications

  local filename="nvim-$NEOVIM_VERSION.AppImage"

  if [ ! -e $filename ]; then
    bullet 'Downloading Neovim AppImage... '
    curl -L https://github.com/neovim/neovim/releases/download/$NEOVIM_VERSION/nvim.appimage \
      -o $filename
    show_result

    chmod +x $filename
  fi

  symlink $filename nvim.AppImage

  mkdir -p ~/bin
  symlink ~/Applications/nvim.AppImage ~/bin/nvim
}

install_symlinks() {
  mkdir -p ~/.config
  symlink "$DOTF/nvim" ~/.config/nvim

  symlink "$DOTF/nvim/pylintrc" ~/.pylintrc
  mkdir -p ~/.config/yamllint
  symlink "$DOTF/nvim/yamllint-config" ~/.config/yamllint/config
  symlink "$DOTF/nvim/tern-config" ~/.tern-config

  # vim backwards compatibility
  symlink "$DOTF/nvim/init.vim" ~/.vimrc
  symlink "$DOTF/nvim" ~/.vim
}

install_plugins() {
  bullet "Running PlugInstall... "
  nvim --headless +PlugInstall +UpdateRemotePlugins +qall
  success "done"
}

install_dtach() {
  install_package dtach
}

install_cli_tools() {
  if is_arch; then
    pacman_install ctags tidy
  elif is_debian; then
    apt_install exuberant-ctags global
  elif is_fedora; then
    yum_install ctags
  else
    brew_install ctags
    brew_install global --with-pygments
  fi

  if is_wsl; then
    if missing_command win32yank; then
      explain_win32yank
      exit 1
    fi
  fi

  npm_install markserv
  npm_install htmlhint
  npm_install marked
  npm_install name-that-color
  npm_install livedown
  npm_install coffeelint
  npm_install eslint
  npm_install prettier
  npm_install jsonlint
  npm_install sass-lint
  npm_install javascript-typescript-langserver

  npm_install typescript
  npm_install vscode-html-languageserver-bin
  npm_install vscode-json-languageserver
  npm_install css-langserver
  npm_install eslint-server
  npm_install tslint-server
  pip3_install pylint
  pip3_install yamllint

  is_fedora && yum_install redhat-rpm-config
  pip3_install neovim-remote
}

explain_win32yank() {
  echo '=================================='
  echo 'Missing win32yank!'
  echo
  echo '1. Download latest release from https://github.com/equalsraf/win32yank/releases'
  echo '2. Extract win32yank.exe to C:/Windows/System32'
  echo '3. In WSL symlink win32yank.exe to ~/bin/win32yank'
  echo '=================================='
}

main $@
