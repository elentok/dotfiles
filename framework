#!/usr/bin/env bash
# vim: foldmethod=marker

set -euo pipefail

# DOTF directory {{{1

DOTF="$(dirname "${BASH_SOURCE[0]-$0}")"
DOTF="$(cd "$DOTF" && pwd)"
export DOTF

source "$DOTF/core/zsh/core.sh"

# Machine varibles {{{1
MACHINE_VARFILE=$HOME/.config/machine

if [ -e "$MACHINE_VARFILE" ]; then
  source "$MACHINE_VARFILE"
fi

store_variable() {
  local key="$1"
  local value="$2"

  mkdir -p "$HOME/.config"
  if [ ! -e "$MACHINE_VARFILE" ]; then touch "$MACHINE_VARFILE"; fi

  (
    grep -v "export $key=" "$MACHINE_VARFILE"
    echo "export $key='$(escape_variable "$value")'"
  ) > tmpfile
  mv -f tmpfile "$MACHINE_VARFILE"
  chmod 600 "$MACHINE_VARFILE"

  eval "export $key='$(escape_variable "$value")'"
}

escape_variable() {
  echo -n "$1" | sed "s/'/\\\\'/g"
}

# Colors {{{1
export BLACK="\\033[30m"
export GRAY="\\033[1;30m"
export RED="\\033[31m"
export GREEN="\\033[32m"
export YELLOW="\\033[33m"
export BLUE="\\033[34m"
export CYAN="\\033[36m"
export UNDERLINE="\\033[4m"
export RESET="\\033[0m"
export CLEAR_LINE="\\r\\033[K"

function color-green() {
  echo -e "$GREEN"
}

function color-blue() {
  echo -e "$BLUE"
}

function color-reset() {
  echo -e "$RESET"
}

# Special Characters {{{1

export HOURGLASS="⏳ "

# Identify OS {{{1
if command_missing X; then
  export HAS_GUI=no
else
  export HAS_GUI=yes
fi

to_uppercase() {
  if [ $# -gt 0 ]; then
    echo "$@" | awk '{print toupper($0)}'
  else
    awk '{print toupper($0)}'
  fi
}

# display methods (header/bullet/info/success/error) {{{1
title() {
  echo -e "\\n${BLUE}$*"
  # replace all characters with "="
  echo "${*//?/=}"
  echo -e "$RESET"
}

header() {
  echo -e "\\n${BLUE}${UNDERLINE}==== ${*^^} ====$RESET"
}

bullet() {
  echo -e -n "${YELLOW}•$RESET $*"
}

clear_line() {
  echo -e -n "$CLEAR_LINE"
}

info() {
  echo -e "${CYAN}$*$RESET"
}

success() {
  echo -e "${GREEN}✔ $*$RESET"
}

error() {
  echo -e "${RED}✘ $*$RESET"
}

show_result() {
  if [ $? -eq 0 ]; then
    success 'done'
  else
    error 'FAIL'
    if [ "$1" = "die_on_error" ]; then
      exit 1
    else
      return 1
    fi
  fi
}

# confirm {{{1
confirm() {
  local default=${2:-no}
  ask "${1} (yes/no)?" yesno $default
  [ "$yesno" = "yes" -o "$yesno" = "y" ]
  return $?
}

# ask {{{1
# (by @n0nick)
# Usage:
#   ask "What's up?" answer "ok"
#   echo $answer
ask() {
  local question=$1
  local default=${3:-}
  local resultvar=$2

  echo -ne "$question "
  if [ "$default" ]; then
    echo -n "[$default] "
  fi
  read ${read_args:-} reply
  echo

  reply="${reply:-$default}"
  reply=$(echo $reply | sed "s/'/'\"'\"'/g")
  eval $resultvar="'$reply'"
}

ask_password() {
  local question=$1
  local resultvar=$2

  read_args="-s" ask "$question" password1
  read_args="-s" ask "Enter again to confirm: " password2

  if [ "$password1" = "$password2" ]; then
    eval $resultvar=$(printf %q $password1)
  else
    echo "The passwords don't match, please try again."
    ask_password "$@"
  fi
}

pause() {
  local text=${1:-Press any key to continue... }
  echo -ne "$text"
  read -n 1
}

# backup {{{1
backup() {
  info "\n  backing up to ${1}.backup"
  mv -f "$1" "${1}.backup"
  if [ $? == 0 ]; then return; fi

  info "  trying with sudo:"
  sudo mv -f "$1" "${1}.backup"
  if [ $? != 0 ]; then
    error "FAILED"
    exit 1
  fi
}

# symlink {{{1
symlink() {
  source=$1
  target=$2

  bullet "Linking $source\n      ==> ${target}... "
  if [ -e "$target" ]; then
    if [ -h "$target" ]; then
      if [ "$source" == "$(readlink "$target")" ]; then
        info " already exists"
        return
      fi
    fi

    backup "$target"
  fi

  ln -sf "$source" "$target"
  if [ $? != 0 ]; then
    info "  Can't create link, trying with sudo:"
    sudo ln -sf "$source" "$target"
    if [ $? != 0 ]; then
      error "failed"
      exit 1
    fi
  fi
  if [ $? == 0 ]; then
    success "done"
  fi
}

# Install Brew/Apt package {{{1
install_package() {
  APT=''
  BREW=''

  while extract_flag "${1:-}"; do shift; done

  if is_mac; then
    brew_install "${BREW:-$1}"
  else
    apt-fast-install "${APT:-$1}"
  fi
}

install_tgz() {
  SUDO=no
  while extract_flag "$1"; do shift; done

  local url="$1"
  local filename="$(basename "$url")"
  mkdir -p ~/.self-build
  cd ~/.self-build
  wget "$1"
  tar xzf "$filename"

  local root_dir="$(tar tzf "$filename" | head -1)"
  cd "$root_dir"

  if [ -x "configure" ]; then
    ./configure
  fi

  if [ "$SUDO" == 'yes' ]; then
    sudo make
    sudo make install
  else
    mkdir -p $HOME/.local
    make
    make install --prefix=$HOME/.local
  fi
}

# Gems {{{1

gem_install() {
  for gem in $*; do
    gem_install_single $gem
  done
}

gem_install_single() {
  bullet "Installing gem ${1}... [sudo] "
  if [ "$(gem_cache | grep \"^$1\b\")" != "" ]; then
    info "already installed"
  else
    sudo /usr/bin/gem install $*
    rm -f $TMP/gem_cache
  fi
}

rm -f $TMP/gem_cache

gem_cache() {
  if [ ! -e $TMP/gem_cache ]; then
    /usr/bin/gem list > $TMP/gem_cache
  fi
  cat $TMP/gem_cache
}

# Homebrew {{{1
brew_install() {
  bullet "Installing ${1}... "

  #if [ "`brew ls -1 | grep \"^$1\$\"`" != "" ]; then
  if has_brew_package "$1"; then
    info "already installed"
  else
    brew install $*
  fi
}

brew_install_url() {
  name=$1
  shift

  bullet "Installing ${name}... "
  if has_brew_package "$name"; then
    info "already installed"
  else
    brew install $*
  fi
}

has_brew_package() {
  [ "$(brew ls -1 | grep \"^$1$\")" != "" ]
}

brew_tap() {
  repo=$1
  bullet "Tapping brew repository ${repo}... "
  if has_brew_tap "$repo"; then
    info "already installed"
  else
    brew tap $*
  fi
}

has_brew_tap() {
  brew_list_taps | grep "^$1$" > /dev/null
}

brew_list_taps() {
  cd $BREW_ROOT/Library/Taps && /bin/ls -1d */*
}

# Homebrew Cask {{{1

brew_cask_install() {
  bullet "Installing ${1}... "

  if has_brew_cask_package "$1"; then
    info "already installed"
  else
    brew cask install $*
  fi
}

has_brew_cask_package() {
  [ "$(brew cask list | grep \"^$1$\")" != "" ]
}

# Git {{{1
git_clone() {
  origin=$1
  target=$2
  option=${3:-}
  bullet "Cloning $origin => ${target}..."
  if [ -d $target ]; then
    if [ -d $target/.git ]; then
      current_origin=$(cd $target && git_get_origin)
      if [ "$current_origin" == "$origin" ]; then

        if [ "$option" == "--update" ]; then
          info " already cloned, just updating"
          (cd "$target" && git pull)
        else
          info " already cloned"
        fi
        return
      fi
    fi
    backup $target
  fi

  git clone "$1" "$2"
}

git_get_origin() {
  git remote -v | grep fetch | awk '{print $2}'
}

git-repo-is-dirty() {
  [ "$(git status --porcelain)" != "" ]
}

# Go Get {{{1
go_get() {
  pkg="$1"
  bullet "Installing Go package '$pkg'..."
  if [ -e "$GOPATH/src/$pkg" ]; then
    info " already installed"
  else
    info ""
    go get -u "$pkg"
  fi
}

# Apt: Add Repo {{{1
apt-fast-add-repo() {

  bullet "Adding repository ${1}..."
  sources="/etc/apt/sources.list /etc/apt/sources.list.d/*.list"
  if [ "$(grep "$1" $sources)" != "" ]; then
    info " already installed"
  else
    # required for add-apt-repository
    bullet "[Add PPA]: Installing prerequisits..."
    apt-fast-install software-properties-common apt-transport-https gnupg wget
    bullet "[Add PPA]: Calling add-apt-repository ..."
    sudo add-apt-repository -y "${1}"
    bullet "[Add PPA]: Calling apt-get update..."
    sudo apt-get update
    bullet "[Add PPA]: Done."
  fi
}

# Deb packages {{{1
install_deb() {
  local name="$1"
  local url="$2"

  bullet "Installing ${name}..."

  if apt_cache | grep "^${name}$" > /dev/null; then
    info " already installed"
  else
    wget "$url" -O $TMP/${name}.deb
    sudo dpkg -i $TMP/${name}.deb
    rm -f $TMP/apt-cache
  fi
}

# make_dir {{{1
make_dir() {
  bullet "Creating directory ${1}... "
  if [ -e $1 ]; then
    info "already exists"
  else
    mkdir -p $1
    if [ $? == 0 ]; then
      success "created"
    else
      info "  trying with sudo:"
      sudo mkdir -p $1
      if [ $? != 0 ]; then
        error "FAILED"
        exit 1
      fi
    fi
  fi
}

# sudo_copy {{{1
sudo_copy() {
  bullet "Copying $(basename $1) to $2 (with sudo)... "

  if should_sudo_copy "$1" "$2"; then
    if [ -e "$2.backup" ]; then
      sudo mv -f "$2" "$2.backup"
    fi

    sudo cp -f "$1" "$2"
    show_result die_on_error
  else
    info 'already exists'
  fi
}

should_sudo_copy() {
  if [ ! -e "$2" ]; then
    return 0
  fi

  if diff "$1" "$2" > /dev/null; then
    return 1
  fi

  return 0
}

# copy_to_dir {{{1
copy_to_dir() {
  source="$1"
  target_dir="$2"
  if [[ ! "$target_dir" =~ /$ ]]; then
    target_dir="$target_dir/"
  fi

  if [ ! -d "$target_dir" ]; then
    make_dir "$target_dir"
  fi

  basename="$(basename "$source")"

  bullet "Copying '$basename' to '$target_dir'... "
  if [ -e "$target_dir$basename" ]; then
    info 'already exists.'
  else
    cp "$source" "$target_dir"
    if [ $? != 0 ]; then
      error 'FAILED'
      exit 1
    else
      success 'done'
    fi
  fi
}

# user {{{1
user_exists() {
  id "$1" > /dev/null 2>&1
}

user_has_group() {
  local group="$1"
  local user="${2:-}"
  if [ -z "$user" ]; then
    user=$(whoami)
  fi

  groups $user | cut -d: -f2 | grep "\b$group\b" > /dev/null
}

add_user_to_group() {
  local group="$1"
  local user="${2:-}"
  if [ -z "$user" ]; then
    user=$(whoami)
  fi

  bullet "Adding '$user' to group '$group'... "

  if user_has_group $group $user; then
    info 'already exists.'
  else
    sudo usermod -a -G $group $user
    show_result die_on_error
  fi
}

# group {{{1
group_exists() {
  cat /etc/group | grep "^$1:" > /dev/null 2>&1
}

create_group() {
  local group="$1"

  bullet "Creating group '$group'... "
  if group_exists "$group"; then
    info 'already exists.'
  else
    sudo groupadd "$group"
    show_result die_on_error
  fi
}

# extract flag {{{1

# Usage:
#   func() {
#     FLAG1=no
#     FLAG2=no
#     while extract_flag "$1"; do shift; done
#     echo "1=$FLAG1 2=$FLAG2"
#   }
#
# func --flag1          # 1=yes 2=no
# func --flag2          # 1=no 2=yes
# func --flag1 --flag2  # 1=yes 2=yes
# func --flag1=value    # 1=value 2=yes
#
extract_flag() {
  if [[ "$1" =~ ^-- ]]; then
    local flag_name="${1/--/}"
    local value='yes'

    if [[ "$flag_name" =~ "=" ]]; then
      local value="$(echo $flag_name | cut -d= -f2)"
      local flag_name="$(echo $flag_name | cut -d= -f1)"
    fi

    local flag_name="$(to_uppercase $flag_name)"

    eval "$flag_name=\"$value\""
    return 0
  fi

  return 1
}

# Run command {{{1
#
# Usage:
#   run_command [--sudo] [--bg] <name> <command> <arg1>...
#
run_command() {
  SUDO=no
  BG=no
  while extract_flag "$1"; do shift; done

  name="$1"
  shift

  bullet "Starting ${name}... "
  if is_running "$1"; then
    info 'Already running.'
  else
    cmd='sh -c'
    if [ "$SUDO" == 'yes' ]; then
      cmd='sudoo'
    fi

    if [ "$BG" == 'yes' ]; then
      $cmd "$@" &
      success '(started in background)'
    else
      $cmd "$@"
      show_result
    fi
  fi
}

# Find parent {{{1

# Looks for a parent directory with one of the following files
# e.g.
#
# root=$(find-parent-with .git Gemfile)
#
function find-parent-with() {
  local path=''
  while [ 1 ]; do
    local abspath=$(
      cd ./$path
      pwd
    )
    if [ "$abspath" == "/" ]; then
      return 1
    fi

    for filename in "$@"; do
      if [ -e "$abspath/$filename" ]; then
        echo "$abspath"
        return 0
      fi
    done

    path="../$path"
  done
}

# helpers {{{1
trim() {
  sed -E 's/(^\s+|\s+$)//g'
}

device-for() {
  mountpoint="$1"
  diskutil info "$1" | grep 'Device Node' | cut -d: -f2 | trim
}

# Files {{{1
filesize() {
  stat -c%s "$1"
}

# Services {{{1
service-start() {
  bullet "Starting service $1... "
  if is_arch; then
    sudo systemctl start $1
  else
    sudo service $1 start
  fi
  show_result
}

service-stop() {
  bullet "Stopping service $1... "
  if is_arch; then
    sudo systemctl stop $1
  else
    sudo service $1 stop
  fi
  show_result
}

# Verify permissions {{{1
verify-perms() {
  local expected="$1"
  local file="$2"

  printf "* Verifying '$file' has permissions '$expected'... "
  if [ ! -e "$file" ]; then
    info 'skipping, file is missing'
    return
  fi

  local actual="$(stat --format=%a $file)"
  if [ "$actual" == "$expected" ]; then
    info 'ok'
  else
    ${CHMOD:-chmod} $expected "$file"
    show_result
  fi
}

# Versions {{{1
function is-valid-version() {
  local range="$1"
  local version="$2"
  [ -n "$(semver --coerce --range "$range" "$version")" ]
}

# App Builder {{{1
function app-prepare-build-dir() {
  local name="$1"
  prepare-directory "$TMP/build/$name"
}

function app-prepare-dir() {
  local name="$1"
  local version="$2"
  prepare-directory "$HOME/.apps/all/$name/$version"
}

function prepare-directory() {
  local dir="$1"

  if [ -e "$dir" ]; then
    if [ "${CLEAN:-}" == "no" ]; then
      return
    fi

    rm -rf "$dir"
  fi

  mkdir -p "$dir"

  echo -n "$dir"
}

function app-exists() {
  [ -e "$(app-dir "$@")" ]
}

function app-dir() {
  local name="$1"
  local version="$2"
  echo -n "$HOME/.apps/all/$name/$version"
}

function app-set-default() {
  local name="$1"
  local version="$2"
  target="$(app-dir "$name" default)"
  source="$(app-dir "$name" "$version")"
  if [ ! -e "$source" ]; then
    echo "Error: no directory '${source}'"
    return 1
  fi

  symlink "$source" "$target"
}

# Benchmark {{{1

if [[ "${BASH_VERSION:-}" =~ ^3.* ]]; then
  benchmark-start() {
    echo
  }

  benchmark-stop() {
    echo
  }
else
  declare -A BENCHMARKS=()

  benchmark-start() {
    key=${1:-GLOBAL}
    BENCHMARKS[$key]=$SECONDS
  }

  benchmark-stop() {
    key=${1:-GLOBAL}
    duration=$(($SECONDS * 1000 - BENCHMARKS[$key] * 1000))
    if [[ $duration > 1000 ]]; then
      duration=$(($duration / 1000))
      printf '%.2fs' $duration
    else
      printf '%.2fms' $duration
    fi
  }
fi
