#!/usr/bin/env bash
#
# Install and upgrades packages via npm, pip, apt, ...
#
# Usage:
#
#   dotf-pkgs i <source>
#   dotf-pkgs u <source>
#
# Sources: apt, brew, pip, npm, cargo

set -euo pipefail

source "$(dirname "$0")/../../framework.sh"

CONFIG_FILE="$DOTF/config/packages.cfg"

function main() {
  cmd="${1:-}"
  shift || true

  case "$cmd" in
  i | install)
    install-pkgs "$@"
    ;;
  u | upgrade)
    upgrade-pkgs "$@"
    ;;
  *)
    usage "$0"
    exit 1
    ;;
  esac
}

function install-pkgs() {
  case "${1:-}" in
  apt)
    install-apt-pkgs
    ;;
  brew)
    install-brew-pkgs
    ;;
  pip)
    install-pip-pkgs
    ;;
  npm)
    install-npm-pkgs
    ;;
  cargo)
    install-cargo-pkgs
    ;;
  mason)
    install-mason-pkgs
    ;;
  *)
    install-apt-pkgs && install-pip-pkgs && install-npm-pkgs
    ;;
  esac
}

function install-apt-pkgs() {
  if dotf-is-linux; then
    dotf-header h2 '[dotf-pkgs] Installing apt packages...'

    flavor=debian
    if dotf-is-ubuntu; then
      flavor=ubuntu
    fi

    echo "flavor: $flavor"

    dotf-apt "$(get-pkgs apt)" "$(get-pkgs apt-$flavor)"

    #if dotf-has-command X; then
    #  dotf-header h2 '[dotf-pkgs] Installing apt-gui packages...'
    #  dotf-apt "$(get-pkgs apt-gui)"
    #fi

    if [ "${KDE:-}" = 'yes' ]; then
      dotf-header h2 '[dotf-pkgs] Installing apt-kde packages...'
      dotf-apt "$(get-pkgs apt-kde)"
    fi
  fi
}

function install-brew-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing brew packages...'
  dotf-brew "$(get-pkgs brew)"

  if dotf-is-mac; then
    if has-pkgs brew-mac; then
      dotf-header h2 '[dotf-pkgs] Installing brew mac-only packages...'
      dotf-brew "$(get-pkgs brew-mac)"
    fi
  else
    if has-pkgs brew-linux; then
      dotf-header h2 '[dotf-pkgs] Installing brew linux-only packages...'
      dotf-brew "$(get-pkgs brew-linux)"
    fi
  fi
}

function install-pip-pkgs() {
  if dotf-is-linux; then
    dotf-apt python3 python3-pip
  fi

  dotf-header h2 '[dotf-pkgs] Installing pip packages...'
  dotf-pip "$(get-pkgs pip)"
}

function install-npm-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing npm packages...'
  dotf-npm "$(get-pkgs npm)"
}

function install-cargo-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing cargo packages...'
  dotf-cargo "$(get-pkgs cargo)"
}

function install-mason-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing mason packages...'
  # shellcheck disable=SC2046
  dotf-mason $(get-pkgs mason)
}

function upgrade-pkgs() {
  dotf-header h2 '[dotf-pkgs] Updating packages...'

  dotf-header h3 '[dotf-pkgs] Updating pip packages...'
  # shellcheck disable=SC2046
  pip3 install --upgrade --user --break-system-packages $(get-pkgs pip)

  dotf-header h3 '[dotf-pkgs] Updating npm packages...'
  eval "$(fnm env --use-on-cd)"

  # shellcheck disable=SC2046
  npm install -g $(get-pkgs npm)

  # shellcheck disable=SC2046
  dotf-mason -f $(get-pkgs mason)
}

function has-pkgs() {
  local prefix="$1"
  grep "^${prefix}: " "$CONFIG_FILE" >/dev/null 2>&1
}

function get-pkgs() {
  local prefix="$1"
  grep "^${prefix}: " "$CONFIG_FILE" | awk '{print $2}' | xargs
}

main "$@"
