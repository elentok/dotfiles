#!/usr/bin/env bash
#
# Install and upgrades packages via npm, pip, apt, ...
#
# Usage:
#
#   dotf-pkgs i <source>
#   dotf-pkgs u <source>
#
# Sources: apt, brew, pip, npm, cargo

set -euo pipefail

source "$(dirname "$0")/../../framework.sh"

CONFIG_FILE="$DOTF/config/packages.cfg"

function main() {
  cmd="${1:-}"
  shift || true

  case "$cmd" in
  l | list)
    list-pkgs "$@"
    ;;
  i | install)
    install-pkgs "$@"
    ;;
  u | upgrade)
    upgrade-pkgs "$@"
    ;;
  s | stats)
    pkg-stats
    ;;
  m | managers)
    pkg-managers
    ;;
  *)
    usage "$0"
    exit 1
    ;;
  esac
}

function install-pkgs() {
  case "${1:-}" in
  apt)
    install-apt-pkgs
    ;;
  brew)
    install-brew-pkgs
    ;;
  pipx)
    install-pipx-pkgs
    ;;
  npm)
    install-npm-pkgs
    ;;
  cargo)
    install-cargo-pkgs
    ;;
  mason)
    install-mason-pkgs
    ;;
  *)
    install-apt-pkgs && install-pipx-pkgs && install-npm-pkgs
    ;;
  esac
}

function install-apt-pkgs() {
  if dotf-is-linux; then
    dotf-header h2 '[dotf-pkgs] Installing apt packages...'

    flavor=debian
    if dotf-is-ubuntu; then
      flavor=ubuntu
    fi

    echo "flavor: $flavor"

    dotf-apt "$(get-pkgs apt)" "$(get-pkgs apt-$flavor)"

    #if dotf-has-command X; then
    #  dotf-header h2 '[dotf-pkgs] Installing apt-gui packages...'
    #  dotf-apt "$(get-pkgs apt-gui)"
    #fi

    if [ "${KDE:-}" = 'yes' ]; then
      dotf-header h2 '[dotf-pkgs] Installing apt-kde packages...'
      dotf-apt "$(get-pkgs apt-kde)"
    fi
  fi
}

function install-brew-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing brew packages...'
  dotf-brew "$(get-pkgs brew)"

  if dotf-is-mac; then
    if has-pkgs brew-mac; then
      dotf-header h2 '[dotf-pkgs] Installing brew mac-only packages...'
      dotf-brew "$(get-pkgs brew-mac)"
    fi
  else
    if has-pkgs brew-linux; then
      dotf-header h2 '[dotf-pkgs] Installing brew linux-only packages...'
      dotf-brew "$(get-pkgs brew-linux)"
    fi
  fi
}

function install-pipx-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing pipx packages...'
  dotf-pipx "$(get-pkgs pipx)"
}

function install-npm-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing npm packages...'
  dotf-npm "$(get-pkgs npm)"
}

function install-cargo-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing cargo packages...'
  dotf-cargo "$(get-pkgs cargo)"
}

function install-mason-pkgs() {
  dotf-header h2 '[dotf-pkgs] Installing mason packages...'
  # shellcheck disable=SC2046
  dotf-mason $(get-pkgs mason)
}

function upgrade-pkgs() {
  dotf-header h2 '[dotf-pkgs] Updating packages...'

  dotf-header h3 '[dotf-pkgs] Updating brew packages...'
  list-pkgs brew | xargs brew upgrade

  # dotf-header h3 '[dotf-pkgs] Updating mason packages...'
  # list-pkgs mason | xargs dotf-mason -f

  dotf-header h3 '[dotf-pkgs] Updating pip packages...'
  list-pkgs pip | xargs pip3 install --upgrade --user --break-system-packages

  dotf-header h3 '[dotf-pkgs] Updating npm packages...'
  eval "$(fnm env --use-on-cd)"
  list-pkgs npm | xargs npm install -g
}

function has-pkgs() {
  local prefix="$1"
  grep "^${prefix}: " "$CONFIG_FILE" >/dev/null 2>&1
}

function get-pkgs() {
  list-pkgs "$1" | xargs
}

function list-pkgs() {
  local prefix="$1"
  grep "^${prefix}: " "$CONFIG_FILE" | awk '{print $2}'
}

function pkg-stats() {
  echo "Packages per package manager:"
  echo
  pkg-managers | while read -r manager; do
    count="$(list-pkgs "$manager" | wc -l)"
    echo "$(printf %3d "$count") $manager"
  done | sort -n -r

  echo
  homebrew-dep-stats
}

function homebrew-dep-stats() {
  echo "Dependencies per brew package:"
  pkg-managers | grep '^brew' | grep -v 'brew-extra' | while read -r manager; do
    list-pkgs "$manager" | while read -r pkg; do
      count="$(homebrew-count-deps "$pkg")"
      echo "$(printf %4d "$count") $pkg"
    done
  done | sort -n -r
}

function homebrew-count-deps() {
  pkg="$1"
  echo $(($(brew deps --tree --installed "$pkg" | grep -c -v '^\s*$') - 1))

}

function pkg-managers() {
  grep -E "^[a-z-]+: " "$CONFIG_FILE" | cut -d: -f1 | sort -u
}

main "$@"
