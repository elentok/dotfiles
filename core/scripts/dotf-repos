#!/usr/bin/env bash
#
# Setup repositories (clone or pull changes)
#
# Usage:
#
#   dotf-repos setup
#
# Will look for config files in:
#
#   $DOTF/config/repos.cfg
#   $DOTL/config/repos.cfg
#   $DOTP/config/repos.cfg
#   ~/.config/dotfiles/repos.cfg
#
# Example config file:
#
#   git@github.com:elentok/dotfiles=~/.dotfiles
#

set -euo pipefail

source "$DOTF/framework"

CONFIG_FILES=(
  "$DOTF/config/repos.cfg"
  "$DOTL/config/repos.cfg"
  "$DOTP/config/repos.cfg"
  "$HOME/.config/dotfiles/repos.cfg"
)

function main() {
  local cmd="${1:-}"
  shift || true

  case "$cmd" in
    list)
      list-repos
      ;;
    setup)
      setup-repos
      ;;
    qs | quick-status)
      quick-status
      ;;
    *)
      usage "$0"
      exit 1
      ;;
  esac
}

function list-repos() {
  for config_file in "${CONFIG_FILES[@]}"; do
    if [ -e "$config_file" ]; then
      get-entries "$config_file"
    fi
  done | sort
}

function quick-status() {
  for config_file in "${CONFIG_FILES[@]}"; do
    if [ -e "$config_file" ]; then
      get-entries "$config_file" | extract-dir | while read -r dir; do
        repo-quick-status "$dir"
      done
    fi
  done
}

function repo-quick-status() {
  local dir="$1"

  local ok=yes
  local text="- "

  if dotf-git-repo-is-dirty "$dir"; then
    text="${text}DIRTY "
    ok=no
  else
    text="${text}clean "
  fi

  if has-unpushed-commits "$dir"; then
    text="${text}UNPUSHED "
    ok=no
  else
    text="${text}pushed   "
  fi

  if [ "$ok" == "yes" ]; then
    echo "${text}$dir"
  else
    echo "$(dotf-color red)${text}$dir$(dotf-color reset)"
  fi
}

function has-unpushed-commits() {
  local dir="$1"

  local branch
  branch="$(cd "$dir" && git branch --show-current)"

  [ -n "$(cd "$dir" && git log "origin/$branch..$branch")" ]
}

function setup-repos() {
  dotf-header h2 "Done setting up repositories :-)"

  for config_file in "${CONFIG_FILES[@]}"; do
    if [ -e "$config_file" ]; then
      setup-repos-in-config "$config_file"
    fi
  done

  dotf-header h2 "Done setting up repositories :-)"
}

function setup-repos-in-config {
  local filename="$1"
  dotf-header h2 "Setting up repos from $filename"
  get-entries "$filename" | while read -r line; do
    url="$(echo "$line" | extract-url)"
    dir="$(echo "$line" | extract-dir)"
    setup-repo "$url" "$dir"
  done
}

function get-entries() {
  local filename="$1"
  grep -vE "^(#|\s*$)" "$filename"
}

function extract-url() {
  cut -d= -f1 | dotf-trim
}

function extract-dir() {
  cut -d= -f2 | dotf-trim | sed "s#~#$HOME#"
}

function setup-repo() {
  local url="$1"
  local dir="$2"

  echo
  dotf-color yellow
  echo " â€¢ Setting up $url"
  echo "           => $dir"
  dotf-color reset

  if [ -e "$dir" ]; then
    if [ -d "$dir" ]; then
      echo "  File exists, pulling"
      (cd "$dir" && git pull --rebase) | sed 's/^/  /'
    else
      echo "SKIPPED: File exists in '$dir' and it's not a directory"
    fi
  else
    echo "Cloing..."
    parent="$(dirname "$dir")"
    mkdir -p "$parent"
    git clone "$url" "$dir"
  fi
}

main "$@"
