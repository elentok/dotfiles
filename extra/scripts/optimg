#!/usr/bin/env ruby

require "#{ENV['DOTF']}/scripts/lib/framework.rb"
require 'fileutils'

DEFAULT_FIT = '1500x1500'

TMPDIR = ENV['TMPDIR'] || "/tmp"

class CLI < OptionsCLI
  desc 'Optimizes images'
  usage 'optimg [options] <file>...'
  min_items 1
  cli_options \
    verbose:   ['-v', '--verbose',   'Show more information'],
    bw:        ['-b', '--bw',        'Use 2 colors and a depth of 1'],
    grayscale: ['-g', '--grayscale', 'Use 16 colors and a depth of 4'],
    colors:    ['-c', '--colors',    'Number of colors'],
    depth:     ['-d', '--depth',     'Depth of color'],
    fit:       ['-f', '--fit RES',   'Resize the image to fit in these ' \
                'bounds (if no size defined defaults to 1500x1500)'],
    output:    ['-o', '--output OUTPUT', 'Output directory ' \
                '(defaults to "optimized")'],
    silent:    ['-s', '--silent', "Don't overwrite files"]

  def start
    options.merge!(colors: 2, depth: 1)  if options[:bw]
    options.merge!(colors: 16, depth: 4) if options[:grayscale]
    options.merge!(fit: DEFAULT_FIT)     if options[:fit] == true

    ARGV.each { |filename| optimize(filename) if File.file?(filename) }
  end

  def optimize(filename)
    ImageOptimizer.new(filename, options).optimize!
  end
end

class ImageOptimizer
  def initialize(filename, options)
    @source_file = filename
    @options = options
  end

  def extension
    @extension ||= File.extname(@source_file)
  end

  def target_file
    @target_file ||=
      begin
        basename = File.basename(@source_file)
        dirname = File.dirname(@source_file)

        optimized_dir = @options[:output] ||
                        optimized_dir = File.join(dirname, 'optimized')
        Dir.mkdir(optimized_dir) unless Dir.exist?(optimized_dir)

        File.join(optimized_dir, basename)
      end
  end

  def tempfile1
    @tempfile1 ||=
      File.join(TMPDIR, "tempfile1#{extension}")
  end

  def tempfile2
    @tempfile2 ||=
      File.join(TMPDIR, "tempfile2#{extension}")
  end

  def optimize!
    puts blue("* Optimizing #{@source_file}...")

    if File.exist?(target_file)
      return if @options[:silent]
      return unless confirm?('  Output file exists, overwrite')
    end

    FileUtils.cp(@source_file, tempfile1)


    convert('-colors', @options[:colors].to_s) if @options[:colors]
    convert('-depth',  @options[:depth].to_s)  if @options[:depth]
    convert('-resize', "#{@options[:fit]}>")  if @options[:fit]

    FileUtils.mv(tempfile1, target_file)
    describe_target_file
  end

  def describe_target_file
    original_size = File.size(@source_file)
    target_size = File.size(target_file)
    target_size_kb = target_size / 1024
    percentage = target_size * 100 / original_size
    puts green("  done (#{target_size_kb}kb, #{percentage}% of original)")
  end

  def convert(*args)
    cmd = ['convert', args, tempfile1, tempfile2].flatten
    puts blue("  >>> #{cmd.join(' ')}") if @options[:verbose]
    if system(*cmd)
      FileUtils.rm tempfile1
      FileUtils.mv tempfile2, tempfile1
    else
      puts "ImageMagick failed: #{cmd.join(' ')}"
      exit 1
    end
  end
end

CLI.new.start
