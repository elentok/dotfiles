#!/usr/bin/env node

const F = require("./lib/framework.js");
const _ = require("underscore");
const program = require("commander");
const axios = require("axios");
const chalk = require("chalk");
const moment = require("moment");
const fs = require("fs");
const path = require("path");
const shell = require("shelljs");

class Station {
  constructor({ id, title, hebTitle }) {
    this.id = id;
    this.title = title;
    this.hebTitle = hebTitle;
    this.name = title
      .toLowerCase()
      .replace(/\(.*$/, "")
      .replace(/'/g, "")
      .trim()
      .replace(/\s/g, "-");
  }

  print() {
    const comment = chalk.grey(`(${this.id} ${this.title})`);
    console.info(`${this.name} ${comment}`);
  }
}

const StationRepo = {
  _stations: null,
  _cacheFilename: path.join(process.env.HOME, ".cache/dotfiles/stations.json"),

  fetch() {
    if (this._stations != null) return Promise.resolve(this._stations);

    this._stations = this._loadFromCache();
    if (this._stations != null) return Promise.resolve(this._stations);

    F.printProgress("Fetching stations");
    return this._loadFromServer().then((stations) => {
      F.clearLine();
      this._stations = stations;
      this._saveToCache();
      return stations;
    });
  },

  findByName(name) {
    this.fetch().then((stations) => {
      return stations.find((s) => s.name === name);
    });
  },

  _loadFromCache() {
    try {
      fs.statSync(this._cacheFilename);
    } catch (e) {
      return null;
    }

    return JSON.parse(fs.readFileSync(this._cacheFilename)).map((attribs) => new Station(attribs));
  },

  _saveToCache() {
    const cacheDir = path.dirname(this._cacheFilename);
    shell.mkdir("-p", cacheDir);

    fs.writeFileSync(this._cacheFilename, JSON.stringify(this._stations, null, 2));
  },

  _loadFromServer() {
    return axios.get("https://www.rail.co.il").then((response) => {
      const match = response.data.match(/var stationSegRes=(.*);var/);
      if (match == null) throw new Error("Can't load stations");

      const raw = JSON.parse(match[1]);
      return raw.Data.Data.CustomPropertys.map((rawStation) => {
        return new Station({
          id: rawStation.Id,
          title: rawStation.Eng.join(", "),
          hebTitle: rawStation.Heb.join(", "),
        });
      });
    });
  },
};

class Train {
  constructor({ arrival, departure, duration, hasExchange }) {
    this.arrival = arrival;
    this.departure = departure;
    this.duration = duration;
    this.hasExchange = hasExchange;
  }

  print() {
    const exchange = this.hasExchange ? ", has exchange" : "";
    const details = chalk.grey(`(${this.duration}${exchange})`);
    console.info(`${this.departure} => ${this.arrival} ${details}`);
  }
}

const TrainRepo = {
  fetch(originId, destId, departure = moment()) {
    if (typeof departure === "string") {
      departure = this.parseTime(departure);
    }

    const url = "https://www.rail.co.il/apiinfo/api/Plan/GetRoutes";

    F.printProgress("Fetching trains");
    return axios
      .get(url, {
        params: {
          OId: originId,
          TId: destId,
          Date: departure.format("YYYYMMDD"),
          Hour: departure.format("HHMM"),
          isGoing: true,
        },
      })
      .then((response) => {
        F.clearLine();
        // Uncomment this line to debug the parser
        // fs.writeFileSync("trains.json", JSON.stringify(response.data))
        return this.parse(response.data);
      });
  },

  parse(rawData) {
    return rawData.Data.Routes.map((route) => {
      const firstTrain = route.Train[0];
      const lastTrain = route.Train[route.Train.length - 1];

      return new Train({
        duration: route.EstTime.replace(":00", ""),
        arrival: firstTrain.ArrivalTime.replace(":00", "").split(" ")[1],
        departure: lastTrain.DepartureTime.replace(":00", "").split(" ")[1],
        hasExchange: route.IsExchange,
      });
    });
  },

  parseTime(time) {
    let parsed = moment(time, "YYYY-MM-DD HH:mm");
    if (parsed.isValid()) {
      return parsed;
    }

    parsed = moment(time, "HH:mm");
    if (parsed.isValid()) {
      return parsed;
    }

    return null;
  },
};

const CLI = {
  fetchTrains(origin, dest, time) {
    StationRepo.fetch()
      .then((stations) => {
        const originId = stations.find((s) => s.name === origin).id;
        const destId = stations.find((s) => s.name === dest).id;

        return TrainRepo.fetch(originId, destId, time).then((trains) => {
          console.info(`Found ${trains.length} trains:\n`);
          trains.forEach((t) => t.print());
        });
      })
      .catch((e) => console.error(e));
  },

  listStations() {
    return StationRepo.fetch().then((stations) => {
      stations = _(stations).sortBy("title");
      stations.forEach((station) => station.print());
    });
  },
};

program
  .arguments("<origin> <dest> [time]")
  .option("-l --list", "list all stations")
  .action((origin, dest, time) => CLI.fetchTrains(origin, dest, time))
  .parse(process.argv);

if (program.list) {
  CLI.listStations().catch((e) => console.error(e));
}
