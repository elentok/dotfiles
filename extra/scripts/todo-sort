#!/usr/bin/env python3
#
# Sort markdown todo lists

import fileinput
import re
from dataclasses import dataclass
import sys
from typing import Optional

_INDENT_RE = re.compile(r"^(\s*)")
_TASK_RE = re.compile(r"^(\s*)- \[([^\]]+)\] (.*)$")

_STATUS_TEXT_TO_VALUE = {" ": 30, "x": 40, "waiting": 20, "inprogress": 10}


class Node:
    line: str
    is_separator: bool
    indent: int
    children: list["Node"]
    parent: Optional["Node"]

    def __init__(self, line: str):
        self.line = line
        self.is_separator = line.startswith("#") or line.startswith("---")
        self.children = []
        self.parent = None
        match = _INDENT_RE.match(line.rstrip())
        if match:
            self.indent = len(match.group(1))
        else:
            self.indent = 0

    def add(self, child: "Node"):
        child.parent = self
        self.children.append(child)

    def __str__(self):
        children = f"({len(self.children)} children)"
        if self.is_separator:
            return f"SEP:  {self.line.rstrip()} {children}"
        else:
            return f"NODE: {self.line.rstrip()} {children}"

    def write_recursive(self, fd=sys.stdout):
        fd.write(self.line)
        for child in self.children:
            child.write_recursive(fd)


class Task(Node):
    status: str
    status_value: int
    subject: str

    def __init__(self, line: str):
        super().__init__(line)
        match = _TASK_RE.match(line)
        if match == None:
            raise ValueError(f"Line '{line}' is not a task")

        self.status = match.group(2)
        self.status_value = _STATUS_TEXT_TO_VALUE[self.status]
        self.subject = match.group(3)

    def __str__(self):
        children = f"({len(self.children)} children)"
        return f"TASK: [{self.status}] {self.subject} {children}"

    def sort_value(self):
        return f"{self.status_value}:{self.subject}"


#
# class File:
#     nodes: list[Node]
#
#     def __init__(self, nodes: list[Node]):
#         self.nodes = nodes
#
# class Block:
#     nodes: list[Node]
#
#     def __init__(self, nodes: list[Node], start: int):
#         self.nodes = nodes


def is_task(line: str) -> bool:
    return _TASK_RE.match(line) != None


def parse_line(line: str) -> Node:
    if is_task(line):
        return Task(line)
    else:
        return Node(line)


def find_parent(node: Node, last_node: Optional[Node]) -> Optional[Node]:
    if last_node is None:
        return None

    parent = last_node
    while parent and node.indent <= parent.indent:
        parent = parent.parent

    return parent


def parse_file():
    nodes = []
    last_node: Optional[Node] = None

    for line in fileinput.input():
        node = parse_line(line)
        parent = find_parent(node, last_node)
        if parent:
            parent.add(node)
        else:
            nodes.append(node)

        last_node = node

        # if len(nodes) > 0:
        #     if node.indent > nodes[-1].indent > node.indent

    # nodes = [parse_line(line) for line in fileinput.input()]
    return nodes


@dataclass
class Fragment:
    tasks: list[Task]
    start: int


def find_fragments_to_sort(nodes: list[Node]) -> list[Fragment]:
    fragments: list[Fragment] = []
    fragment_tasks: Optional[list[Task]] = None
    fragment_start: Optional[int] = None

    for i, node in enumerate(nodes):
        if isinstance(node, Task):
            if fragment_tasks is not None:
                fragment_tasks.append(node)
            else:
                fragment_tasks = [node]
                fragment_start = i
        else:
            if fragment_start is not None and fragment_tasks is not None:
                fragment = Fragment(fragment_tasks, fragment_start)
                fragments.append(fragment)
                fragment_tasks = None
                fragment_start = None

    if fragment_start is not None and fragment_tasks is not None:
        fragment = Fragment(fragment_tasks, fragment_start)
        fragments.append(fragment)

    return fragments


def sort_tasks(tasks: list[Task]) -> list[Task]:
    return sorted(tasks, key=lambda task: task.sort_value())


def main():
    nodes = parse_file()

    for fragment in find_fragments_to_sort(nodes):
        sorted_tasks = sort_tasks(fragment.tasks)
        end = fragment.start + len(fragment.tasks)
        nodes[fragment.start : end] = sorted_tasks

    for node in nodes:
        node.write_recursive()


if __name__ == "__main__":
    main()
