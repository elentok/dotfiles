#!/usr/bin/env bash
#
# Usage: worksesh <minutes>

set -uo pipefail

DATA_DIR=~/.local/share/worksesh
LOG_FILE="$DATA_DIR/sessions.log"
STATE_FILE="$DATA_DIR/state.txt"
mkdir -p "$DATA_DIR"

trap handle_ctrl_c INT

source "$DOTF/core/scripts/lib/os.sh"

function main() {
  if [ $# -eq 0 ]; then
    usage "$0"
    exit 1
  fi

  if [ "$1" == "status" ]; then
    status
  else
    start "$@"
  fi
}

function start() {
  local minutes="$1"
  local remaining_mins=$minutes

  # echo "$(date +%s) $minutes" > $STATE_FILE

  while [ "$remaining_mins" -gt 1 ]; do
    echo " ${remaining_mins}m" > $STATE_FILE
    if [ "$((remaining_mins % 5))" == 0 ] || [ "$remaining_mins" -lt 3 ]; then
      notify "${remaining_mins} minutes remaining"
    else
      echo "${remaining_mins} minutes remaining"
    fi

    sleep 60
    remaining_mins=$((remaining_mins - 1))
  done

  remaining_sec=60
  while [ "$remaining_sec" -gt 0 ]; do
    echo " ${remaining_sec}s" > $STATE_FILE
    notify "${remaining_sec} seconds remaining"
    sleep 20
    remaining_sec=$((remaining_sec - 20))
  done

  echo " ✔" > $STATE_FILE

  write-to-log "complete: ${minutes}m session"

  lock
}

function status() {
  if [ -e "$STATE_FILE" ]; then
    cat "$STATE_FILE"
  fi
}

function notify() {
  echo "$@"
  dotf-notify "$@"
  if dotf-is-mac; then
    say "$@"
  fi
}

function lock() {
  notify "Locking in 5 seconds"
  sleep 5

  if dotf-is-mac; then
    pmset displaysleepnow
  else
    loginctl lock-session
  fi
}

ctrl_c_max=3
ctrl_c_count=0

function handle_ctrl_c() {
  ctrl_c_count=$((ctrl_c_count + 1))
  if [ "$ctrl_c_count" -lt "$ctrl_c_max" ]; then
    echo
    echo "To abort, press ctrl+c $((ctrl_c_max - ctrl_c_count)) more time(s)"
  else
    echo "Work session aborted by user"
    echo " ✘" > $STATE_FILE
    write-to-log "aborted: ${minutes}m session (${remaining_mins} remaining)"
    exit 1
  fi
}

function write-to-log() {
  echo "$(date '+%Y-%m-%d %H:%M') $*" >> "$LOG_FILE"
}

main "$@"
