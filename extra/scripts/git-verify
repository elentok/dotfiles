#!/usr/bin/env ruby

require "#{ENV['DOTF']}/scripts/lib/git.rb"

class CLI < OptionsCLI
  desc 'Verify local git repo is synced with remotes'
  usage 'git verify [options]'
  cli_options(
    show_remotes:     ['-r', '--show-remotes',
                       'Show remote branches without local'],
    checkout_remotes: ['-R', '--checkout-remotes',
                       'Checkout remote branches without local']
  )

  def start
    @repo = Repo.new(ARGV[0] || '.')
    @repo.fetch_all
    report_local_branches_without_remote
    report_remote_branches_without_local if options[:show_remotes]
    report_unsynced_branches

    checkout_remotes if options[:checkout_remotes]
  end

  def report_local_branches_without_remote
    return if @repo.local_branches_without_remote.empty?

    # branch_names = @repo.local_branches_without_remote.map
    puts red("Local branches without remote: #{@repo.local_branches_without_remote.keys.join(', ')}")
    puts
  end

  def report_remote_branches_without_local
    return if @repo.remote_branches_without_local.empty?

    puts red('Remote branches without local:')
    @repo.remote_branches_without_local.each { |_, branch| puts "* #{branch}" }
    puts
  end

  def report_unsynced_branches
    return if @repo.unsynced_branches.empty?

    names = @repo.unsynced_branches.map(&:local).join(', ')
    puts red("Unsynced branches without remote: #{names}")

    @repo.unsynced_branches.each do |pair|
      pair.sync! if confirm?(yellow("Sync #{pair}?"))
    end
  end

  def checkout_remotes
    puts
    puts red('Checking out remote branches without local:')
    @repo.remote_branches_without_local.each do |_, branch|
      if confirm?("Checkout #{branch}", 'yes')
        @repo.git("checkout -b #{branch.name} #{branch}")
      end
    end

    puts
  end
end

class Pair
  attr_reader :local, :remote

  def initialize(local, remote)
    @local = local
    @remote = remote
  end

  def to_s
    "#{@local} <=> #{@remote}"
  end

  def sync!
    print_progress "Checking out branch #{@local}"
    git "checkout #{@local}"
    clear_line

    pull
    clear_line

    return if synced? || @local.protected?
    push if confirm?(yellow("Push to #{@remote}?"))
  end

  def pull
    print_progress "Pulling from #{remote_arg}"

    begin
      git "pull --rebase=false --ff-only #{remote_arg}"
    rescue GitError
      clear_line
      pull_alternatives
    else
      clear_line
    end

    @local.reset_hash!
    @remote.reset_hash!
  end

  def pull_alternatives
    case pick_alternative
    when 'rebase'
      git "pull --rebase #{remote_arg}"
    when 'reset'
      git "reset --hard #{@remote}"
    when 'pushf'
      git "push -f #{remote_arg}"
    when 'skip'
    end
  end

  def pick_alternative
    puts red("Can't fast forward, these are the changes:")
    show_diff

    puts yellow('These are your options:')
    puts "  [rebase] Do a pull with rebase (#{@local} <= #{@remote})"
    puts "  [reset]  Do a hard reset       (#{@local} <= #{@remote})"
    puts "  [pushf]  Do a push -f          (#{@local} => #{@remote})"
    puts '  [skip]   Do nothing'
    ask yellow('What would you like to do?')
  end

  def remote_arg
    "#{@remote.remote_name} #{@remote.name}"
  end

  def push
    print_progress "Pushing to #{remote_arg}"
    git "push #{remote_arg}"
    clear_line
  end

  def show_diff
    local_info = @local.repo.ref_info(@local)
    remote_info = @local.repo.ref_info(@remote)

    if local_info.commit_time > remote_info.commit_time
      puts green("  * Local:  #{local_info}")
      puts red("  * Remote: #{remote_info}")
    elsif local_info.commit_time < remote_info.commit_time
      puts red("  * Local:  #{local_info}")
      puts green("  * Remote: #{remote_info}")
    else
      puts yellow("  * Local:  #{local_info}")
      puts yellow("  * Remote: #{remote_info}")
    end

    puts
  end

  def git(command)
    @local.repo.git(command)
  end

  def synced?
    @local.hash == @remote.hash
  end
end

CLI.new.start
