# --backend BACKEND
#     Specify the backend to use: xrender, glx, or xr_glx_hybrid.  xrender is the default one.
#
#     •   xrender backend performs all rendering operations with X Render extension. It is what xcompmgr uses, and is generally a
#         safe fallback when you encounter rendering artifacts or instability.
#
#     •   glx (OpenGL) backend performs all rendering operations with OpenGL. It is more friendly to some VSync methods, and has
#         significantly superior performance on color inversion (--invert-color-include) or blur (--blur-background). It requires
#         proper OpenGL 2.0 support from your driver and hardware. You may wish to look at the GLX performance optimization options
#         below.  --xrender-sync and --xrender-sync-fence might be needed on some systems to avoid delay in changes of screen
#         contents.
#
#     •   xr_glx_hybrid backend renders the updated screen contents with X Render and presents it on the screen with GLX. It
#         attempts to address the rendering issues some users encountered with GLX backend and enables the better VSync of GLX
#         backends.  --vsync-use-glfinish might fix some rendering issues with this backend.
backend = "glx";


# --vsync VSYNC_METHOD
#     Set VSync method. VSync methods currently available:
#
#     •   none: No VSync
#
#     •   drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some (DRI-based) drivers.
#
#     •   opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some drivers.
#
#     •   opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on some drivers.
#
#     •   opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on some drivers. Works only with GLX backend.
#         Known to be most effective on many drivers. Does not guarantee to control paint timing.
#
#     •   opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically the same as opengl-swc above, except the
#         extension we use.
#
#     (Note some VSync methods may not be enabled at compile time.)
#
vsync = "opengl-swc";

# --glx-swap-method undefined/exchange/copy/3/4/5/6/buffer-age
#     GLX backend: GLX buffer swap method we assume. Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
#     undefined is the slowest and the safest, and the default value.  copy is fastest, but may fail on some drivers, 2-6 are
#     gradually slower but safer (6 is still faster than 0). Usually, double buffer means 2, triple buffer means 3.  buffer-age
#     means auto-detect using GLX_EXT_buffer_age, supported by some drivers. Useless with --glx-use-copysubbuffermesa. Partially
#     breaks --resize-damage. Defaults to undefined.
glx-swap-method = 2;

# --xrender-sync
#     Attempt to synchronize client applications' draw calls with XSync(), used on GLX backend to ensure up-to-date window content
#     is painted.
xrender-sync = true;

# --xrender-sync-fence
#     Additionally use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users. May be
#     disabled at compile time with NO_XSYNC=1.
xrender-sync-fence = true;

# vim: filetype=conf
